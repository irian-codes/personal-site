---
import type {GetStaticPaths} from 'astro';
import {Image} from 'astro:assets';
import personPicture from '../../assets/images/irian-cv-image.jpg';
import ContactSection from '../../components/website/ContactSection.astro';
import CvButton from '../../components/website/CvButton.astro';
import GlowBar from '../../components/website/GlowBar.astro';
import ProjectsSection from '../../components/website/ProjectsSection.astro';
import StarsBackbround from '../../components/website/StarsBackbround.astro';
import TypewritingText from '../../components/website/TypewritingText.astro';
import {languages, type LanguageTag} from '../../i18n/i18n';
import {useTranslations} from '../../i18n/i18nUtils';
import BaseLayout from '../../layouts/BaseLayout.astro';

// We need this special function so Astro can generate a page for each langauge
export const getStaticPaths = (() => {
  return Object.keys(languages).map((lang) => ({
    params: {lang},
  }));
}) satisfies GetStaticPaths;

const locale = Astro.params.lang as LanguageTag;
const t = useTranslations(locale);

// Finds the right media query to make the contact title
// letters look nice on all screen widths.
const contactHeadingBrMediaQuery = (() => {
  const [min, max] = (() => {
    switch (locale) {
      case 'ca':
        return [705, 935];

      case 'es':
        return [603, 845];

      case 'en':
      default:
        return [668, 1025];
    }
  })();

  // NOTE: This CSS needs more specificity than the one Astro bundles
  // to get correctly applied.
  return `@media (min-width: ${min}px) and (max-width: ${max}px) {
        #contact-title-first-part br.heading-break {
          display: none;
        }
      }`;
})();
---

<BaseLayout title="Irian's website">
  <StarsBackbround />
  <GlowBar />
  <main>
    <div id="top-section-container">
      <div>
        <h1>
          {t('website.home.title.first-part') + ' '}
          <span class="title-highlight"
            ><TypewritingText
              texts={[t('website.home.title.second-part')]}
            /></span
          >
        </h1>
        <div class="subheading">
          {t('website.home.subtitle.first-part')}
          <br />
          {t('website.home.subtitle.second-part')}
        </div>
        <CvButton />
      </div>
      <Image
        id="person-picture"
        src={personPicture}
        alt={t('website.home.person-image.alt-attribute')}
      />
    </div>
    <h2>{t('website.home.projects-title')}</h2>
    <div class="heading-underline" role="presentation"></div>
    <ProjectsSection />
    <h2 id="contact-title-first-part">
      {t('website.home.contact-title.first-part') + '... '}
      <br class="heading-break" />
      <span id="contact-title-second-part" class="title-highlight"
        >{t('website.home.contact-title.second-part')}</span
      >
    </h2>
    <ContactSection />
    <div class="spacer-global" role="presentation"></div>
  </main>
</BaseLayout>

<!-- This style steps out of Astro's bundling. This is necessary
  because variables don't work on media queries by default. And
  we don't know the media query at build time because we don't
  know the language the user we'll be rendering the page in.
  And since the pages are dynamically created at built time we
  can only use raw CSS because code fencing variables don't work
  in this specific type of CSS media query statements.
  NOTE: If <h2 id="contact-title-first-part"> text changes in i18n
  then you'll need to edit these values again.
Source: https://docs.astro.build/en/guides/styling/#raw-css-imports -->
<style is:inline set:html={contactHeadingBrMediaQuery}></style>

<style>
  :root {
    margin: auto;
    padding: 1.5rem;
    max-width: 1200px;
  }
  #contact-title-first-part {
    color: rgb(var(--heading-color-1));
    text-shadow: none;
    margin-top: 4rem;
    margin-bottom: 2.5rem;
  }
  #top-section-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    border-color: rgb(var(--accent-color-1));
    border-width: 3px;
    border-style: solid;
    padding: 2rem;
    background-color: rgb(var(--light-background-color));
    overflow: hidden;
    position: relative;
  }
  /* Light reflection CSS effect */
  #top-section-container:before {
    content: '';
    position: absolute;
    top: -100px;
    left: -110px;
    width: 10rem;
    height: 20rem;
    opacity: 0.7;
    transform: rotate(45deg);
    background: linear-gradient(
      to right,
      rgba(var(--accent-color-1), 1) 0%,
      rgba(var(--accent-color-1), 0.15) 70%,
      rgba(var(--accent-color-1), 0.09) 92%,
      rgba(var(--accent-color-1), 0) 100%
    );
  }
  #person-picture {
    width: 200px;
    height: 200px;
    margin-left: 4rem;
    border-color: rgb(var(--accent-color-1));
    border-width: 2px;
    border-radius: 50%;
    border-style: solid;
  }
  .title-highlight {
    color: rgb(var(--accent-color-1));
    text-shadow: 2px 2px 6px rgba(var(--accent-color-1), 0.7);
    font-weight: 800;
  }
  .heading-break {
    display: block;
  }
</style>
