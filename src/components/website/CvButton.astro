---
import {getLangFromUrl, useTranslations} from '../../i18n/i18nUtils';
import {defaultLanguageTag} from '../../i18n/i18n';
import WebsiteButton from './WebsiteButton.astro';

const locale = getLangFromUrl(Astro.url);
const t = useTranslations(locale);
const baseUrl = import.meta.env.BASE_URL;

const buttonUrl = (() => {
  const localeUrlPart = locale === defaultLanguageTag ? '' : `${locale}/`;

  return `${baseUrl}${localeUrlPart}irian-cv-${locale}.pdf`;
})();
---

<div class="cv-button">
  <a href={buttonUrl}>
    <WebsiteButton label={t('website.home.top-section.cv-button.label')} />
  </a>
  <div class="ripple-container">
    <span class="ripple-source"></span>
  </div>
</div>

<script>
  (function rippleClickAnimation() {
    const cvButtons = Array.from(document.getElementsByClassName('cv-button'));

    cvButtons.forEach((btn) => {
      const rippleSource = btn.querySelector('.ripple-source') as
        | HTMLElement
        | undefined;

      const rippleContainer = btn.querySelector('.ripple-container') as
        | HTMLElement
        | undefined;

      if (!rippleSource || !rippleContainer) {
        return;
      }

      btn.addEventListener('click', (event) => {
        // Remove the animation in case the user clicks and it's still playing
        rippleContainer.classList.remove('ripple-animation-on');
        rippleSource?.classList.remove('ripple-animation-on');

        const {pageX, pageY} = event as MouseEvent;
        const rect = btn.getBoundingClientRect();

        rippleSource.style.top = `${pageY - rect.top}px`;
        rippleSource.style.left = `${pageX - rect.left}px`;

        rippleContainer?.classList.add('ripple-animation-on');
        rippleSource?.classList.add('ripple-animation-on');
      });

      rippleSource.addEventListener('animationend', () => {
        rippleContainer.classList.remove('ripple-animation-on');
        rippleSource?.classList.remove('ripple-animation-on');
      });
    });
  })();

  (function fluidScaling() {
    const cvButtons = Array.from(document.getElementsByClassName('cv-button'));

    const minWidth = 700;
    const maxWidth = 1080;
    const minScaleValue = 1;
    const maxScaleValue = 1.5;

    const mappingScaleFactor =
      (maxScaleValue - minScaleValue) / (maxWidth - minWidth);

    const offset = -minWidth * mappingScaleFactor + minScaleValue;

    const scaleValue = Math.max(
      Math.min(window.innerWidth * mappingScaleFactor + offset, maxScaleValue),
      minScaleValue
    );

    cvButtons.forEach((btn) => {
      (btn as HTMLButtonElement).style.transform = `scale(${scaleValue})`;
    });
  })();
</script>

<style>
  .cv-button {
    display: inline-block;
    position: relative;
  }

  .ripple-container {
    position: absolute;
    inset: 0 0 0 0;
    overflow: hidden;

    /* We need to lower the z-index so the ripple is behind the button, otherwise it obstructs onhover and onclick events */
    z-index: -1;

    /* This is necessary to match the scale on button hover */
    transform: scale(1.1);

    &.ripple-animation-on {
      z-index: 10;
    }
  }

  .ripple-source {
    position: absolute;
    display: none;
    z-index: 11;
    top: 0;
    left: 0;
    width: 7px;
    height: 7px;
    border-radius: 50%;
    box-shadow:
      0 0 0 2px rgb(255 255 255 / 50%),
      0 0 0 4px rgb(255 255 255 / 20%);

    &.ripple-animation-on {
      display: block;
      animation: shadow-animation 1.6s ease-out;
    }
  }

  @keyframes shadow-animation {
    
    0% {
      transform: scale(1);
    }

    100% {
      transform: scale(100);
    }
  }
</style>
