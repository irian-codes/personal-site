<span-translation>
  <slot />
</span-translation>

<script>
  class SpanTranslation extends HTMLElement {
    constructor() {
      super();

      const childStr = (() => {
        if (this.childNodes.length === 0) {
          return '';
        }

        return (this.childNodes[0].textContent ?? '').trim();
      })();

      if (childStr == null || childStr.trim().length === 0) {
        return;
      }

      const strings = this.parseTextWithTags(childStr).map((str) => {
        if (str.includes('<') || str.includes('>')) {
          // Regex to replace <className>text</className> into <span class="className">text</span>
          return str.replace(
            /<(.+?)>(.+?)<\/(.+?)>/,
            '<span class="$1">$2</span>'
          );
        } else {
          return str;
        }
      });

      this.innerHTML = strings.join('');
    }

    private parseTextWithTags(text: string) {
      const parser = new DOMParser();
      const doc = parser.parseFromString(text, 'text/html');

      const result = Array.from(doc.body.childNodes)
        // Keeping the format word1 <className>word2</className> word3 and returning it as a string
        .map((node) =>
          node.nodeType === Node.TEXT_NODE
            ? node.textContent
            : `<${node.nodeName.toLowerCase()}>${node.textContent}</${node.nodeName.toLowerCase()}>`
        )
        .filter((node) => node != null && node.trim().length > 0);

      // We know there are no nulls so we just cast it
      return result as string[];
    }
  }

  customElements.define('span-translation', SpanTranslation);
</script>

<style>
  span-translation {

    & :global(.underline) {
      text-decoration: underline;
      text-underline-offset: 0.5rem;
    }

    & :global(.italic) {
      font-style: italic;
    }

    & :global(.bold) {
      font-weight: bold;
    }
  }
</style>
