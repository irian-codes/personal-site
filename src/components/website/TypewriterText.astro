---
type Props = {
  texts: string[];
  period?: number;
  cursorColor?: string;
  loop?: boolean;
};

const {texts, period = 200, cursorColor = '#fff', loop = false} = Astro.props;
---

<typewriter-text
  data-period={period}
  data-texts={texts}
  data-loop={loop ? 'true' : 'false'}
>
</typewriter-text>

<script>
  type TypingState = 'deleting' | 'deleted' | 'typing' | 'finished' | 'stopped';

  // Inspired on https://css-tricks.com/snippets/css/typewriter-effect/
  class TypewriterText extends HTMLElement {
    private toRotate: string[] = [];
    private loopNum: number = 0;
    private currentTxt: string = '';
    private state: TypingState = 'typing';
    private loop: boolean = false;
    private period: number = 200;

    constructor() {
      super();

      const period = parseInt(this.dataset.period ?? 'NaN');
      this.period = isNaN(period) ? 200 : period;

      this.toRotate = (this.dataset.texts ?? '').split(',');
      this.loop = this.dataset.loop === 'true';

      this.tick();
    }

    private getDelta() {
      switch (this.state) {
        // Deleting speed is faster than typing when a person does it
        case 'deleting':
          return (this.period - Math.random() * 100) / 2;

        // To simulate a pause between going into the next text
        case 'deleted':
          return this.period * 3;

        case 'finished':
          return this.period;

        // Normal typing speed with some randomness to give it realism
        case 'typing':
        default:
          return this.period - Math.random() * 100;
      }
    }

    private updateState() {
      const fullTxt = this.toRotate[this.loopNum % this.toRotate.length];
      let newState = this.state;

      // When we've typed the current text
      if (this.state === 'typing' && this.currentTxt === fullTxt) {
        newState = 'finished';
      }
      // When we've deleted the current text
      else if (this.state === 'deleting' && this.currentTxt === '') {
        newState = 'deleted';
        this.loopNum++;
      } else if (this.state === 'deleted') {
        newState = 'typing';
      } else if (this.state === 'finished') {
        // We stop if we have typed all the texts in the array and the 'loop' variable is false
        if (
          this.currentTxt === this.toRotate[this.toRotate.length - 1] &&
          !this.loop
        ) {
          newState = 'stopped';
        } else {
          newState = 'deleting';
        }
      } else {
        // Don't change state
      }

      this.state = newState;
    }

    public tick(): void {
      if (this.state === 'stopped') {
        return;
      }

      const i = this.loopNum % this.toRotate.length;
      const fullTxt = this.toRotate[i];

      if (this.state === 'typing') {
        this.currentTxt = fullTxt.substring(0, this.currentTxt.length + 1);
      } else if (this.state === 'deleting') {
        this.currentTxt = fullTxt.substring(0, this.currentTxt.length - 1);
      }

      this.textContent = this.currentTxt;

      setTimeout(() => {
        this.updateState();
        this.tick();
      }, this.getDelta());
    }
  }

  customElements.define('typewriter-text', TypewriterText);
</script>

<style define:vars={{cursorColor}}>
  typewriter-text {
    border-right: 0.08em solid var(--cursorColor);
  }
</style>
