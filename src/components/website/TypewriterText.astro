---
type Props = {
  animationSteps: number;
  durationInSeconds: number;
  firstLinedelayInSeconds?: number;
  secondLinedelayInSeconds?: number;
};

const {
  animationSteps,
  durationInSeconds,
  firstLinedelayInSeconds = 0,
  secondLinedelayInSeconds = 0,
} = Astro.props;
---

<div class="typewriter-container">
  <span class="typewriter-text">
    <slot />
  </span>
  <div class="typewriter-overlay first"></div>
  <div class="typewriter-overlay second"></div>
</div>

<script is:inline>
  // Inlining scripts since it needs to load with the DOM or in slow connections it won't work.
  // If we inline it we disable Astro optimizations and that's a good thing in this case.

  // Component inspired by https://codepen.io/blackfrom80s/pen/ogoxLw
  (function showSecondLineOverlay() {
    const typewriterTextEls = document.querySelectorAll('.typewriter-text');

    typewriterTextEls.forEach((el) => {
      // Get the element rendered height without line breaks
      el.style.whiteSpace = 'nowrap';
      const renderedHeightFirst = el.getBoundingClientRect().height;

      // Get the element rendered height with line breaks
      el.style.whiteSpace = 'unset';
      const renderedHeightSecond = el.getBoundingClientRect().height;

      // Text jumped line? If yes we display the second line overlay
      if (renderedHeightFirst !== renderedHeightSecond) {
        const container = el.parentElement;
        const textOverlaySecond = container.querySelector(
          '.typewriter-overlay.second'
        );

        textOverlaySecond.style.display = 'block';
      }
    });
  })();

  (function () {
    const typewriterOverlayEls = document.querySelectorAll(
      '.typewriter-overlay'
    );

    typewriterOverlayEls.forEach((el) => {
      el.addEventListener('animationend', (ev) => {
        const animationName = ev.animationName;

        if (animationName === 'typewriter') {
          el.style.display = 'none';
        }
      });
    });
  })();
</script>

<style
  define:vars={{
    'animation-steps': animationSteps,
    'duration-in-seconds': durationInSeconds,
    'first-line-delay-in-seconds': firstLinedelayInSeconds,
    'second-line-delay-in-seconds': secondLinedelayInSeconds,
  }}
>
  .typewriter-container {
    position: relative;
  }

  .typewriter-overlay {
    position: absolute;
    inset: 0 0 0 0;
    z-index: 1;
    border-left: 2px solid transparent;
    background-color: rgb(var(--light-background-color));
    animation:
      typewriter calc(var(--duration-in-seconds) * 1s)
        steps(var(--animation-steps))
        calc(var(--first-line-delay-in-seconds) * 1s) 1 normal,
      blink-text-cursor 500ms steps(20)
        calc(var(--first-line-delay-in-seconds) * 1s) infinite normal;

    &.second {
      display: none;
      animation-delay: calc(
        (
            var(--first-line-delay-in-seconds) +
              var(--second-line-delay-in-seconds)
          ) * 1s
      );
      z-index: 2;
      top: 50%;
    }
  }

  /* Animation */
  @keyframes typewriter {
    from {
      left: 0%;
    }

    to {
      left: 100%;
    }
  }

  @keyframes blink-text-cursor {
    from {
      border-left-color: rgb(255 255 255 / 75%);
    }

    to {
      border-left-color: transparent;
    }
  }
</style>
